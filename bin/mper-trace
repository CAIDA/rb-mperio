#!/usr/bin/env ruby

#################################################################################
#
# Implements traceroute driver using MperIO and trace.rb
#
#############################################################################

unless Kernel.respond_to?(:require_relative)
  module Kernel
    def require_relative(path)
      require File.join(File.dirname(caller[0]), path.to_str)
    end
  end
end

if $0 =~ /dev$/
  $: << "#{ENV['HOME']}/caida/rb-mperio/ext"
  $: << "#{ENV['HOME']}/caida/rb-mperio/lib"
#else
#  require 'rubygems'
end

require 'rubygems'

require 'ostruct'
require 'optparse'

require 'mperio'
require 'wartslib'

require 'yaml'

require 'traceroute-engine'

#never buffer stdout
$stdout.sync = true

BINARY_RECORD_SEPARATOR = "--__mper-trace-record__--"

$options = OpenStruct.new
$options.log_path = nil  # disable logging by default

$options.confidence = nil
$options.dport = nil
$options.firsthop = 1
$options.gaplimit = 5
$options.gapaction = :stop
$options.hoplimit = 255
$options.loops = 1
$options.loopaction = 0
$options.probe_method = :icmp
$options.attempts = 2
$options.all_allocated = false
$options.not_time_exceeded = false
$options.spacing = 0
$options.concurrency = nil
$options.recordroute = 0
#$options.test = false
$options.timeout = 5
$options.outformat = "ascii"

opts = OptionParser.new

opts.banner="usage: #{$0} [-?fv] [-n concurrency] [-s spacing] [-l logfile]\n"\
 + " " * $0.to_s.length + "        -D mperport -c candidatefile | IPa IPb"

opts.on("-a", "--attempts=NUM", Integer,
         "specifies the maximum number of attempts to obtain a response " \
         "per hop (default: 2)") do |v|
  $options.attempts = v
end

opts.on("-b", "--log=PATH", "mper command/result message log path") do |v|
  $options.log_path = v
end

opts.on("-c", "--confidence=NUM", Integer,
        "specifies that a hop should be probed to a specified confidence "\
        "level (95% or 99%) to be sure the trace has seen all interfaces "\
        "that will reply for that hop.") do |v|
  case v
  when 95
    $options.confidene = 0
  when 99
    $options.confidence = 1
  else
    raise OptionParser::ParseError
  end
end

opts.on("-d", "--dport=NUM", Integer,
        "specifies the base destination port value to use for UDP-based " \
        "and TCP-based traceroute methods. For ICMP-based methods, this " \
        "option sets the checksum.") do |v|
  $options.dport = v
end

opts.on("-D", "--mper-port=NUM", Integer,
	"mper control socket port (REQUIRED)") do |v|
  $options.mper_port = v
end

opts.on("-f", "--firsthop=NUM", Integer, 
        "specifies the TTL or HLIM value to begin probing with (default: 1)"
        ) do |v|
  $options.firsthop = v
end

opts.on("-g", "--gaplimit=NUM", Integer, 
        "specifies the number of unresponsive hops permitted until a check " \
        "is made to see if the destination will respond. Zero is unlimited " \
        "(default: 5)") do |v|
  $options.gaplimit = v
end

opts.on("-G", "--gapaction=STR", String,
        "specifies what should happen if the gaplimit condition is met. " \
        "stop: halt probing, lastditch: send last-ditch probes.") do |v|
  if v == "stop"
    $options.gapaction = :stop
  elsif v == "lastditch"
    $options.gapaction = :lastditch
  else
    raise OptionParser::ParseError
  end
end

opts.on("-i", "--targets=PATH",
        "file with target address information") do |v|
  $options.target_path = v
end

opts.on("-l", "--loops=NUM", Integer,
        "a value of 1 enables loop checking (default), whereas a value of " \
        "0 disables loop checking.") do |v|
  if v == 1 || v == 0
    $options.loops = v
  else
    raise OptionParser::ParseError
  end
end

opts.on("-L", "--loopaction=NUM", Integer,
        "specifies the number of 'adjacent interface' loops to allow. " \
        "a value of 0 means that the first set of identical adjacent " \
        "interfaces will cause the trace to halt, 1 the second set (i.e. "\
        "allow 1 set)"
        ) do |v|
  $options.loopaction = v
end

opts.on("-m", "--maxttl=NUM", Integer, 
        "specifies the maximum TTL or HLIM value that will be probed.  By "\
        "default, there is no restriction, apart from the 255 hops that "\
        "the Internet protocols allow.") do |v|
  $options.hoplimit = v
end

opts.on("-n", "--concurrency=NUM", Integer,
        "max addresses to trace concurrently (default: unlimited - be careful,"\
        " this will try and trace all interfaces simultaneously)") do |v|
  $options.concurrency = v
end

opts.on("-o", "--output-file=STR", String,
        "specifies the output file to write measurements to. By default, "\
        "stdout is used.") do |v|
  $options.outfile = v
end

opts.on("-O", "--output-format=STR", String,
        "sepecifies the output format for measurements. the current options "\
        "are 'ascii' (which produces a human-readable output similar to "\
        "unix traceroute), 'yaml' (which serializes the TraceResult object "\
        "to a yaml format, preserving all of the response data) and 'binary' "\
        " (which serializes the TraceResult object to a binary format). "\
        "The default is 'ascii'") do |v|
  $options.outformat = v
end

opts.on("-P", "--method=STR", String,
        "icmp: probe with ICMP echo request (paris depends on mper) (default), "\
        "udp: probe with UDP packets, or tcp: TCP ACK") do |v|
  $stderr.puts "v: #{v}"
  case v
  when "icmp"
      $options.probe_method = :icmp
  when "udp"
      $options.probe_method = :udp
  when "tcp"
      $options.probe_method = :tcp
  else
    raise OptionParser::ParseError
  end
end

opts.on("-Q", "--all-allocated", TrueClass,
        "specifies that all allocated probes are sent, regardless of how "\
        "many responses have been received.") do |v|
  $options.all_allocated = v
end

opts.on("-R", "--recordroute", TrueClass,
        "enable the record route IP option (default: off)") do |v|
  $options.rr = true
end

#opts.on("-s", "--test", TrueClass,
#        "use the test harness rather than MperIO") do |v|
#  $options.test = true
#end

opts.on("-S", "--src-addr=ADDR", String,
        "specifies the source address to use in probes.  The address "\
        "cannot be spoofed.") do |v|
  $options.src_addr = v
end

opts.on("-t", "--tsps=STR", String,
        "addresses to use for the prespecified timestamp IP option. "\
        "format: ip1[,ip2[,ip3[,ip4]]]") do |v|
  $options.tsps = v.split(",")
end

opts.on("-T", "--not-time-exceeded", TrueClass,
        "specifies that time exceeded messages from the destination do not "\
        "cause the trace to be defined as reaching the destination.") do |v|
  $options.not_time_exceeded = v
end

opts.on("-v", "--[no-]verbose", TrueClass,  "show detailed progress") do |v|
  $options.verbose = v
end

opts.on("-V", "--full", TrueClass, "show full result output") do |v|
  $options.full = v
end

opts.on("-w", "--timeout=NUM", Integer,
        "specifies how long to wait, in seconds, for a reply.  By default, "\
        "a value of 5 is used.") do |v|
  $options.timeout = v
end

opts.on("-W", "--wait-probe=NUM", Integer,
        "specifies the minimum time to wait, in 10s of milliseconds, "\
        "between sending consecutive probes.  By default the next probe is "\
        "sent as soon as possible.") do |v|
  $options.spacing = v
end

opts.on("-z", "--tos=HEX", String,
        "specifies the value to set in the IP ToS/DSCP + ECN byte.  By "\
        "default, this byte is set to zero.") do |v|
  $options.tos = v.hex
end

opts.on_tail("-?", "--help", "show this message") do
  puts opts
  exit
end

begin
  opts.parse!(ARGV)
rescue OptionParser::ParseError
  $stderr.puts "ERROR: " + $!.to_s + "\n\n"
  $stderr.puts opts
  exit 1
end

unless $options.mper_port || $options.wartsfile
  $stderr.puts "ERROR: missing mper port\n\n"
  $stderr.puts opts
  exit -1
end

unless $options.target_path || ARGV.length >= 1 ||
    $options.wartsfile
  $stderr.puts "ERROR: target file path "\
    "or at least one address must be specified\n\n"
  $stderr.puts opts
  exit -1
end

if $options.confidence && $options.all_allocated
  $stderr.puts "ERROR: only one of 'confidence' or 'all-allocated' may " \
  "be specified at once"
  $stderr.puts opts
  exit -1
end

if $options.hoplimit && $options.hoplimit < $options.firsthop
  $stderr.puts "ERROR: firsthop is set further than the hoplimit"
  $stderr.puts opts
  exit -1
end

if $options.tsps && $options.rr
  $stderr.puts "ERROR: only one of tsps and record route may be specified " \
  "at once"
  $stderr.puts opts
  exit -1
end

if $options.probe_method == :icmp && $options.dport
  $options.checksum = $options.dport
  $options.dport = nil
end

if $options.outformat
  if $options.outformat == "ascii"
    $record_separator = "\n"
  elsif $options.outformat == "yaml"
    $record_separator = "\n\n"
  elsif $options.outformat == "binary"
    $record_separator = BINARY_RECORD_SEPARATOR
  else
    $stderr.puts "output format must be one of 'ascii', 'yaml', or 'binary'"
    $stderr.puts opts
    exit -1
  end
end

if $options.outfile
  begin
    $outfile = File.open($options.outfile, "w")
    $outfile.puts $options.outformat
    $outfile.print $record_separator
  rescue
    $stderr.puts "ERROR: could not open $outfile for reading"
    $stderr.puts opts
    exit -1
  end
else
  $outfile = $stderr;
end

#============================================================================

class TargetFile

  attr_reader :current_target

  def initialize(target_path)
    @target_path = target_path
    @target_io = File.open target_path
    @done = false
    advance
  end

  def advance
    if @done
      @current_target = nil
    else
      loop do
        line = @target_io.gets
        if line
          next if line =~ /^\#/ || line =~ /^\s*$/
          line.chomp!
          @current_target = line
          break
        else
          @done = true
          @current_target = nil
          break
        end
      end
    end
    return @current_target
  end

end

class ImmediateTargets

  def initialize(targets)
    @targets = targets
    advance
  end
  
  def validate_ip(ip)
    if ip =~ /^\d+\.\d+\.\d+\.\d+$/
      ip
    else
      $stderr.puts "ERROR: malformed target ip: \"#{ip}\""
      advance
    end
  end
  
  def current_target
    @current_target
  end
  
  def advance
    @current_target = @targets.shift
  end
end

#============================================================================
class TraceManager
  
  def initialize

    # the list of tasks (must implement next_probe, receive_probe and taskid)
    @pending_tasks = []
    @next_task_id = 1

    @pending_probes = {}
    @next_probe_id = 1
    
    # initialize the list of addresses to probe
    if $options.target_path
      @targets = TargetFile.new $options.target_path
    else
      @targets = ImmediateTargets.new ARGV
    end
    
    # initialize the mper connection
    begin
      @mperio = MperIO.new $options.mper_port, $options.log_path
      @mperio.delegate = self
    rescue
      $stderr.puts "Failed to connect to mper on port " +
        "#{$options.mper_port}. Is mper running? Is the log path valid?"
      exit -1
    end
    
  end
  
  def start
    @mperio.start
  end
  
  def stop
    @mperio.stop
  end
  
  def get_next_task_id
    id = @next_task_id
    @next_task_id += 1
    return id
  end
  
  def get_next_probe_id
    id = @next_probe_id
    @next_probe_id += 1
    return id
  end
  
  ####
  # used by the TraceTask objects to queue a probe that they want sent
  #
  def queue_probe(task, probe)
    probe.id = get_next_probe_id()
    probe.task = task
    # if $options.verbose
    #  printf "probing (%s|%s) @ %d\n", probe.dest, tsps_ips_s, probe.id 
    # end
    @pending_probes[probe.id] = probe

    case $options.probe_method
      when :icmp
      @mperio.ping_icmp(probe.id, probe.dest, :ttl, probe.ttl,
                        :src_addr, $options.src_addr,
                        :tos, $options.tos,
                        :timeout, $options.timeout,
                        :spacing, $options.spacing,
                        :tsps, $options.tsps,
                        :rr, $options.rr,
                        :cksum, $options.checksum)
      when :udp
      @mperio.ping_udp(probe.id, probe.dest, :ttl, probe.ttl,
                       :dport, $options.dport,
                       :src_addr, $options.src_addr,
                       :tos, $options.tos,
                       :timeout, $options.timeout,
                       :spacing, $options.spacing,
                       :tsps, $options.tsps,
                       :rr, $options.rr)

    when :tcp
      @mperio.ping_tcp(probe.id, probe.dest, :ttl, probe.ttl,
                       :dport, $options.dport,
                       :src_addr, $options.src_addr,
                       :tos, $options.tos,
                       :timeout, $options.timeout,
                       :spacing, $options.spacing)
      
      else fail "INTERNAL ERROR: invalid probing method"
    end
  end
  
  ####
  # used by this object to find the probe object for the given reply
  def match_result(result)
    probe = @pending_probes.delete result.reqnum
    return probe
  end
  
  def fill_task_queue
    while (target = @targets.current_target) != nil
      if $options.concurrency && @pending_tasks.length >= $options.concurrency
        @reached_concurrency = true
        break
      end
      task = TraceTask.new(get_next_task_id(), target, $options)
      @pending_tasks.push task
      @targets.advance
    end
  end
  
  def mperio_on_more
    # fill the task list
    fill_task_queue()
    
    # send the next probe - whatever it may be
    probe_next_task()

    if @pending_tasks.length == 0 && @pending_probes.length == 0
      stop()
    end
  end

  def probe_next_task
    task_cnt = @pending_tasks.length

    # we allow ourselves at most one pass through the list
    # if no tasks can muster up a probe to send after one
    # pass, then we're either done, or they are all waiting
    # for responses, we might as well wait too.
    task_cnt.times do |i|
      # remove the next task from the head of the list
      task = @pending_tasks.shift

      # the list is empty - all tasks are complete
      unless task
        break
      end
      
      # no need to continue probing it
      if task.is_complete
        
        if !$options.outformat || $options.outformat == "ascii"
          #output in ascii
          $outfile.print task.result.to_s
        elsif $options.outformat == 'yaml'
          #output in yaml
          $outfile.print YAML::dump(task.result)
        elsif $options.outformat == 'binary'
          $outfile.print Marshal::dump(task.result)
        else
          $stderr.puts "FATAL ERROR: Unknown output format " \
            "#{$options.outformat}"
          exit -1
        end
        $outfile.print $record_separator

        # add another task (if there are any remaining)
        fill_task_queue()
        # we haven't managed to send a probe yet, keep trying
        probe_next_task()
        # we either sent a probe, or we completed a full cycle,
        # either way, we're not going to look for any more probes
        break
      else
        # the task is still active
        # append it to the 'tail' of the list
        @pending_tasks.push task
        
        # ask for the next probe it wants to send
        probe =  task.next_probe
        if probe
          # it still has a probe that it would like to send
          queue_probe(task, probe)
          # at this point, we have definitely sent a probe
          # no more more
          @more = false
          # the probe is sent, lets not send any more until mper asks us to
          break
        else
          # we didn't manage to send a probe, so let's keep that in mind
          @more = true
        end
      end
    end
  end
  
  def mperio_on_data(result)
    #printf "mperio_on_data: %p\n", result #if $options.verbose

    probe = match_result(result)

    if probe
      probe.result = result
      probe.task.receive_probe(probe)
    else
      $stderr.puts "ignoring duplicate reply received from " +
        "#{result.probe_dest} for probe #{result.reqnum}"
      # exit -1
    end

    fill_task_queue()

    if @more
      mperio_on_more()
    end
  end


  def mperio_on_error(reqnum, message)
    $stderr.printf "mperio_on_error: reqnum=%d msg=%s\n", reqnum, message
    @mperio.stop
    exit 1
  end


  def mperio_on_send_error(reqnum, message)
    $stderr.printf "mperio_on_send_error: reqnum=%d msg=%s\n", reqnum, message
    @pending_tasks.remove reqnum
    @mperio.suspend if @pending_tasks.length == 0 && @queued_tasks.length == 0
  end


  def mperio_service_failure(message)
    $stderr.printf "mperio_service_failure: %s\n", message
    @mperio.stop
    exit 1
  end

end


################################################################################

traceManager = TraceManager.new
traceManager.start
