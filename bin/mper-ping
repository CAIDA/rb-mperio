#!/usr/bin/env ruby

#############################################################################
## Pings a given set of targets as a simple test of MperIO.
##
#############################################################################

if $0 =~ /dev$/
  $: << "#{ENV['HOME']}/caida/rb-mperio/ext"
  $: << "#{ENV['HOME']}/caida/rb-mperio/lib"
else
  require 'rubygems'
end

require 'ostruct'
require 'optparse'

require 'mperio'

$options = OpenStruct.new
$options.mper_port = 1
$options.probing_method = :icmp
$options.spacing = 0
$options.log_path = nil  # disable logging by default

opts = OptionParser.new

opts.on("--full", TrueClass, "show full result output") do |v|
  $options.full_output = v
end

opts.on("--targets", "=PATH",
        "file with target information") do |v|
  $options.target_path = v
end

opts.on("--concurrency", "=NUM", Integer,
        "max targets to probe concurrently (default: unlimited)") do |v|
  $options.concurrency = v
end

opts.on("--spacing", "=NUM", Integer,
        "spacing (ms) between probes (default: #{$options.spacing})") do |v|
  $options.spacing = v
end

opts.on("--icmp", TrueClass, "probe with ICMP echo request (default)") do |v|
  $options.probing_method = :icmp
end

opts.on("--tcp", TrueClass, "probe with TCP ACK") do |v|
  $options.probing_method = :tcp
end

opts.on("--udp", TrueClass, "probe with UDP") do |v|
  $options.probing_method = :udp
end

opts.on("--dport", "=NUM", Integer,
	"destination port for TCP probes (default: 80)") do |v|
  $options.dport = v
end

opts.on("--mper-port", "=NUM", Integer,
	"mper control socket port (#{$options.mper_port})") do |v|
  $options.mper_port = v
end

opts.on("--tsps-ip", "=ADDR1[,ADDR2-4]", String,
        "timestamp prespecified addresses") do |v|
  $options.tsps = v.split(",")
end

opts.on("--log", "=PATH", "mper command/result message log path") do |v|
  $options.log_path = v
end

opts.on("-v", "--[no-]verbose", TrueClass,  "show detailed progress") do |v|
  $options.verbose = v
end

begin
  ARGV.replace opts.parse(*ARGV)
rescue OptionParser::ParseError
  $stderr.puts "ERROR: " + $!.to_s
  $stderr.puts opts
  exit 1
end

#============================================================================

class TargetFile

  attr_reader :destination

  def initialize(target_path)
    @target_path = target_path
    @target_io = File.open target_path
    @done = false
  end

  def next_target
    return nil if @done
    loop do
      line = @target_io.gets
      if line
        next if line =~ /^\#/ || line =~ /^\s*$/
        line.chomp!
        @destination = line
        return line
      else
        @done = true
        return nil
      end
    end
  end

end


#============================================================================

class ImmediateTargets

  attr_reader :destination

  def initialize(targets)
    @targets = targets
  end

  def next_target
    loop do
      return nil if @targets.empty?

      target = @targets.shift
      if target =~ /^\d+\.\d+\.\d+\.\d+$/
        @destination = target
        return target
      else
        $stderr.puts "ERROR: skipping invalid target '" + target + "'"
      end
    end
  end

end


#============================================================================
class ProgressOutput

  def self.probe_info(target, technique, result)
    # NOTE: The probe_ipid value is meaningless for a non-response.
    sprintf "%d\t%s\t%s\t%s\t%s\t%d\t%d\t%d.%06d",
      result.reqnum, target, technique, result.probe_src, result.probe_dest,
      result.probe_ttl, (result.probe_ipid || 0), result.tx_sec, result.tx_usec
  end

  def self.reply_info(result)
    qttl = (result.reply_qttl || "-").to_s
    icmp_type = (result.reply_icmp_type || "-").to_s
    icmp_code = (result.reply_icmp_code || "-").to_s
    tcp_flags = (result.reply_tcp_flags || "-").to_s
    tsps1 = result.reply_tsps_ip1 ? 
      sprintf("%s:%d", result.reply_tsps_ip1, result.reply_tsps_ts1) : 
      "-"
    tsps1 = result.reply_tsps_ip1 ? 
      sprintf("%s:%d", result.reply_tsps_ip1, result.reply_tsps_ts1) : 
      "-"
    tsps2 = result.reply_tsps_ip2 ? 
      sprintf("%s:%d", result.reply_tsps_ip2, result.reply_tsps_ts2) : 
      "-"
    tsps3 = result.reply_tsps_ip3 ? 
      sprintf("%s:%d", result.reply_tsps_ip3, result.reply_tsps_ts3) : 
      "-"
    tsps4 = result.reply_tsps_ip4 ? 
      sprintf("%s:%d", result.reply_tsps_ip4, result.reply_tsps_ts4) : 
      "-"

    ptrn = "%s\t%d\t%s\t%d\t%s\t%s\t%s\t0\t%d.%06d\t%s\t%s\t%s\t%s";
    sprintf ptrn,
      result.reply_src, result.reply_ttl, qttl, result.reply_ipid,
      icmp_type, icmp_code, tcp_flags, result.rx_sec, result.rx_usec,
      tsps1, tsps2, tsps3, tsps4
  end

end


#============================================================================

class Prober

  class TargetID
    attr_reader :id

    def initialize
      @id = 1  # don't use id == 0
    end

    def advance
      @retval = @id
      @id += 1  # unlikely to ever wrap... famous last words
      @retval
    end
  end


  def initialize(mperio, targets)
    @mperio = mperio
    @mperio.delegate = self
    @targets = targets
    @target_id = TargetID.new

    @technique = $options.probing_method.to_s + "-dir"
    @active_count = 0
    @reached_concurrency = false
  end


  def start
    @mperio.start
  end


  def mperio_on_more
    puts "more" if $options.verbose

    if $options.concurrency && @active_count >= $options.concurrency
      @reached_concurrency = true
      return  # submit next task in mperio_on_data when a slot becomes free
    end

    target = @targets.next_target
    if target
      printf "probing %s @ %d\n", target, @target_id.id if $options.verbose
      case $options.probing_method
      when :icmp
        @mperio.ping_icmp @target_id.advance, target, 
         $options.spacing, $options.tsps

      when :tcp
        @mperio.ping_tcp @target_id.advance, target, ($options.dport || 80),
          $options.spacing

      when :udp
        # nil dport => let mper choose a dport
        @mperio.ping_udp @target_id.advance, target, $options.spacing

      else fail "INTERNAL ERROR: invalid probing method"
      end

      @active_count += 1
    else
      @mperio.stop if @active_count == 0
    end
  end


  def mperio_on_data(result)
    printf "mperio_on_data: %p\n", result if $options.verbose

    if $options.full_output
      target = result.probe_dest
      probe_info = ProgressOutput.probe_info target, @technique, result
      if result.responded?
        reply_info = ProgressOutput.reply_info result
        printf "T\t%s\t%s\n", probe_info, reply_info
      else
        printf "N\t%s\n", probe_info
      end
    else
      if result.responded?
        printf "%d.%03d >%-15s >ipid=%5d <ipid=%5d ", result.rx_sec,
          result.rx_usec.quo(1000.0), result.probe_dest, result.probe_ipid,
          result.reply_ipid

        if result.reply_src != result.probe_dest
          printf "<%-15s ", result.reply_src 
        end

        if result.icmp_reply?
          printf "icmp %d:%d\n", result.reply_icmp_type, result.reply_icmp_code
        else # result.tcp_reply?
          printf "tcp %s\n", result.decompose_tcp_flags.join(", ")
        end
      else
        printf "%d.%03d >%s timeout\n", result.tx_sec,
          result.tx_usec.quo(1000.0), result.probe_dest
      end
    end

    @active_count -= 1
    if @reached_concurrency
      @reached_concurrency = false
      mperio_on_more()
    end

    @mperio.stop if @active_count == 0
  end


  def mperio_on_error(reqnum, message)
    $stderr.printf "mperio_on_error: reqnum=%d msg=%s\n", reqnum, message
    @mperio.stop
    exit 1
  end


  def mperio_on_send_error(reqnum, message)
    $stderr.printf "mperio_on_send_error: reqnum=%d msg=%s\n", reqnum, message
    @active_count -= 1
    @mperio.stop if @active_count == 0
  end


  def mperio_service_failure(message)
    $stderr.printf "mperio_service_failure: %s\n", message
    @mperio.stop
    exit 1
  end

end

#============================================================================

if $options.target_path
  targets = TargetFile.new $options.target_path
else
  targets = ImmediateTargets.new ARGV
end

mperio = MperIO.new $options.mper_port, $options.log_path
prober = Prober.new mperio, targets
prober.start
